
1. Load the words from the list (code from the course)

WORDLIST_FILENAME = "/Users/jpior/word/words.txt"


def loadWords():
    """
    Returns a list of valid words. Words are strings of lowercase letters.
    
    Depending on the size of the word list, this function may
    take a while to finish.
    """
    print("Loading word list from file...")
    # inFile: file
    inFile = open(WORDLIST_FILENAME, 'r')
    # line: string
    line = inFile.readline()
    # wordlist: list of strings
    wordlist = line.split()
    print("  ", len(wordlist), "words loaded.")
    return wordlist
    
    
   
2. Choose random word (code from the course)
def chooseWord(wordlist):
    """
    wordlist (list): list of words (strings)

    Returns a word from wordlist at random
    """
    
    return random.choice(wordlist)

3. Is word guessed

def isWordGuessed(secretWord, lettersGuessed):
    '''
    secretWord: string, the word the user is guessing
    lettersGuessed: list, what letters have been guessed so far
    returns: boolean, True if all the letters of secretWord are in lettersGuessed;
      False otherwise
    '''
    # FILL IN YOUR CODE HERE...

    for char in secretWord:
    
        if char not in lettersGuessed:
            return False
            
    return True
    
4. Create a guessed Word

def getGuessedWord(secretWord, lettersGuessed):
    '''
    secretWord: string, the word the user is guessing
    lettersGuessed: list, what letters have been guessed so far
    returns: boolean, True if all the letters of secretWord are in lettersGuessed;
      False otherwise
    '''

    result = ''
    
    for char in secretWord:
    
        if result != '':
            result += ' '
        if char not in lettersGuessed:
            result += '_'
        else: # char has been guessed:
            result += char
            
    return result 
    
5.


def getAvailableLetters(lettersGuessed):
    '''
    lettersGuessed: list, what letters have been guessed so far
    returns: string, comprised of letters that represents what letters have not
      yet been guessed.
    '''
    
    alphabet = string.ascii_lowercase
    
    result = '' 
    
    for element in alphabet:
    
        if element in lettersGuessed:
            result = result
        elif element not in lettersGuessed:
            result = result + element
            
    return result
        
        
--------------------------------------------------------------------------------------------------
Final code
--------------------------------------------------------------------------------------------------

def hangman(secretWord):
    '''
    secretWord: string, the secret word to guess.

    Starts up an interactive game of Hangman.

    * At the start of the game, let the user know how many 
      letters the secretWord contains.

    * Ask the user to supply one guess (i.e. letter) per round.

    * The user should receive feedback immediately after each guess 
      about whether their guess appears in the computers word.

    * After each round, you should also display to the user the 
      partially guessed word so far, as well as letters that the 
      user has not yet guessed.

    Follows the other limitations detailed in the problem write-up.
    '''
    
    print("Welcome to the game Hangman! \nI am thinking of a word that {} letters long.".format(len(secretWord))) 
    print("----------------------------------------")
    
    guesses = 8 
    lettersGuessed = []
    result = ''

    # Run the loop until guesses are bigger than one otherwise finish
    while guesses > 0:
        
        print("You have", guesses, "guesses left.")
        print("Available letters: ", getAvailableLetters(lettersGuessed))
    
        guesses -= 1
        
        guessed_word = input("Please guess a letter: ")
        
        # Guessed words add to the list with all results
        lettersGuessed.append(guessed_word)

        # If the guessed word is already in the list
        if guessed_word in secretWord and guessed_word in lettersGuessed:
            
            lettersGuessed.append(guessed_word)
            
            print("Oops! You've already guessed that letter: %s" % (getGuessedWord(secretWord, lettersGuessed)))
            print("----------------------------------------")

        # If the guessed word is not in the secretWord
        elif guessed_word not in secretWord:
            
            print('Oops! That letter is not in my word: ' + getGuessedWord(secretWord, lettersGuessed))
            print("----------------------------------------")

        else:
            # If you guess the letter
            lettersGuessed.append(guessed_word)

            print('Good guess ' + getGuessedWord(secretWord, lettersGuessed))
            
            # If you guess all the secretWord
            if isWordGuessed(secretWord, lettersGuessed):
                
                print("Congratulations, you won!")
                break

    else:
        print("Sorry, you ran out of guesses. The word was {}.".format(secretWord))

